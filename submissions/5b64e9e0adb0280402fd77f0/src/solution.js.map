{"version":3,"sources":["define.js","solution/array.ts","solution/solution.ts"],"names":[],"mappings":"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","file":"solution.js","sourcesContent":["const __exports = {};\r\n\r\nconst define = function (moduleName, dependencies, callback) {\r\n    const moduleExports = __exports[moduleName] = {};\r\n    const args = [null, moduleExports];\r\n    for (let i = 2; i < dependencies.length; i++) {\r\n        args.push(__exports[dependencies[i]]);\r\n    }\r\n    callback.apply(null, args)\r\n}","enum Order {\r\n    Asc,\r\n    Desc\r\n}\r\n\r\ninterface OrderPredicate<T> {\r\n    order: Order,\r\n    selector: (item: T) => any\r\n}\r\n\r\ninterface Array<T> {\r\n    orderBy(...predicates: OrderPredicate<T>[]): Array<T>;\r\n    equal(other: T[]): boolean;\r\n}\r\n\r\nArray.prototype.orderBy = function <T>(...predicates: OrderPredicate<T>[]): Array<T> {\r\n    const compare = (a: any, b: any): number => {\r\n        for (let item of predicates) {\r\n            const aValue = item.selector(a);\r\n            const bValue = item.selector(b);\r\n            if (item.order === Order.Asc && aValue > bValue || item.order === Order.Desc && aValue < bValue) {\r\n                return 1;\r\n            }\r\n            if (item.order === Order.Asc && aValue < bValue || item.order === Order.Desc && aValue > bValue) {\r\n                return -1;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    return this.sort(compare);\r\n}\r\n\r\nArray.prototype.equal = function <T>(other: T[]): boolean {\r\n    if (this.length !== other.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < this.length; i++) {\r\n        if (this[i] !== other[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","import \"./array\";\r\n\r\nclass HistoryItem {\r\n    constructor(public readonly me: boolean, public readonly offer: number[]) {\r\n    }\r\n}\r\n\r\nclass Offer {\r\n    public count: number;\r\n\r\n    constructor(\r\n        public readonly counts: number[],\r\n        public readonly value: number,\r\n        public readonly p: number\r\n    ) {\r\n        this.count = counts.reduce((acc, count) => acc + count);\r\n    }\r\n}\r\n\r\nclass RivalValues {\r\n    constructor(\r\n        public readonly values: number[],\r\n        public readonly value: number,\r\n        public readonly p: number\r\n    ) {\r\n    }\r\n}\r\n\r\n//The maximum is inclusive and the minimum is inclusive\r\nconst randomInt = (min: number, max: number): number => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nmodule.exports = class {\r\n    private round: number = 0;\r\n    private readonly me: boolean;\r\n    private readonly length: number;\r\n    private readonly totalValue: number;\r\n    private readonly history: HistoryItem[] = [];\r\n    private readonly allOffers: Offer[];\r\n    private readonly allRivalValues: number[][];\r\n\r\n    private readonly myFirstP: number = 0.9;\r\n    private readonly myLastButOneP: number = 0.6;\r\n    private readonly myLastP: number = 0.2;\r\n    private readonly rivalFirstP: number = 0.9;\r\n    private readonly rivalLastP: number = 0.4;\r\n    private readonly myProbabilities: number[];\r\n    private readonly rivalProbabilities: number[];\r\n    private readonly epsilonP: number = 0.05;\r\n\r\n    constructor(\r\n        me: number,\r\n        private readonly counts: number[],\r\n        private readonly values: number[],\r\n        private readonly max_rounds: number,\r\n        private readonly log: (s: string) => void\r\n    ) {\r\n        this.me = me === 0;\r\n        this.length = counts.length;\r\n        this.totalValue = this.getValue(counts, values);\r\n        this.allOffers = this.getAllOffers();\r\n        this.allRivalValues = this.getAllRivalValues();\r\n        this.myProbabilities = this.getMyProbabilities();\r\n        this.rivalProbabilities = this.getProbabilities(this.rivalFirstP, this.rivalLastP, this.max_rounds);\r\n    }\r\n\r\n    private getValue(o: number[], values: number[] = this.values): number {\r\n        return o.reduce((acc, count, i) => acc + count * values[i], 0);\r\n    }\r\n\r\n    private getAllOffers(): Offer[] {\r\n        const allOffers: Offer[] = [];\r\n        this.setNextOffers(new Array<number>(), 0, allOffers);\r\n        allOffers.orderBy({ order: Order.Desc, selector: _ => _.value });\r\n        return allOffers;\r\n    }\r\n\r\n    private setNextOffers(counts: number[], index: number, allOffers: Offer[]): void {\r\n        for (let count = 0; count <= this.counts[index]; count++) {\r\n            counts[index] = count;\r\n            counts.fill(0, index + 1);\r\n            if (index === this.length - 1) {\r\n                const copy = counts.slice();\r\n                const value = this.getValue(copy);\r\n                const p = this.getP(value);\r\n                allOffers.push(new Offer(copy, value, p));\r\n            }\r\n            if (index + 1 < this.length) {\r\n                this.setNextOffers(counts, index + 1, allOffers);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getAllRivalValues(): number[][] {\r\n        const allValues: number[][] = [];\r\n        this.setNextRivalValues(new Array<number>(this.length), 0, allValues);\r\n        return allValues;\r\n    }\r\n\r\n    private setNextRivalValues(values: number[], index: number, allValues: number[][]): void {\r\n        for (let value = 0; value <= this.totalValue; value++) {\r\n            values[index] = value;\r\n            values.fill(0, index + 1);\r\n            const totalValue = this.getValue(this.counts, values);\r\n            if (totalValue > this.totalValue) {\r\n                break;\r\n            }\r\n            if (totalValue === this.totalValue && index === this.length - 1) {\r\n                allValues.push(values.slice());\r\n            }\r\n            if (index + 1 < this.length) {\r\n                this.setNextRivalValues(values, index + 1, allValues);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getMyProbabilities(): number[] {\r\n        const result = this.getProbabilities(this.myFirstP, this.myLastButOneP, this.max_rounds - 1);\r\n        result.push(this.myLastP);\r\n        return result;\r\n    }\r\n\r\n    private getProbabilities(firstP: number, lastP: number, count = this.max_rounds): number[] {\r\n        const delta = (lastP - firstP) / (count - 1);\r\n        const result: number[] = [];\r\n        for (let i = 0; i < count; i++) {\r\n            result.push(firstP + delta * i);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private getP(value: number): number {\r\n        return value / this.totalValue;\r\n    }\r\n\r\n    private inverse(o: number[]): number[] {\r\n        return o.map((count, i) => this.counts[i] - count);\r\n    }\r\n\r\n    private getRivalCountStatistics(): number[] {\r\n        const rivalHistory = this.history.filter(_ => !_.me);\r\n        const result = new Array<number>(this.length);\r\n        result.fill(0);\r\n        for (let item of rivalHistory) {\r\n            for (let i = 0; i < this.length; i++) {\r\n                result[i] += item.offer[i];\r\n            }\r\n        }\r\n        for (let i = 0; i < this.length; i++) {\r\n            result[i] = result[i] / rivalHistory.length;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private valuesCount(values: number[]): number {\r\n        return values.reduce((acc, value) => acc + value > 0 ? 1 : 0, 0);\r\n    }\r\n\r\n    private excludeFreeCounts(offers: Offer[]): Offer[] {\r\n        return offers.filter(offer => !offer.counts.some((count, i) => count > 0 && this.values[i] === 0));\r\n    }\r\n\r\n    private excludeEverything(offers: Offer[]): Offer[] {\r\n        return offers.filter(offer => !offer.counts.equal(this.counts));\r\n    }\r\n\r\n    private getAvailableOffers(): Offer[] {\r\n        //exclude everything offer\r\n        let allOffers = this.excludeFreeCounts(this.allOffers);\r\n        if (allOffers.length > 1) {\r\n            allOffers = this.excludeEverything(allOffers);\r\n        }\r\n\r\n        let p = this.myProbabilities[this.round];\r\n        if (p > allOffers[0].p) {\r\n            p = allOffers[0].p - this.epsilonP;\r\n        }\r\n\r\n        return allOffers.filter(_ => _.p >= p);\r\n    }\r\n\r\n    private diff(counts1: number[], counts2: number[]): number {\r\n        //return counts1.reduce((acc, count, i) => acc + Math.abs(count - counts2[i]), 0);\r\n        return counts1.reduce((acc, count, i) => acc + Math.pow(count - counts2[i], 2), 0);\r\n    }\r\n\r\n    private findFirstOffer(): number[] {\r\n        let myOffers = this.allOffers.filter(_ => _.p >= 1);\r\n        if (myOffers.length > 1) {\r\n            myOffers = this.excludeEverything(this.excludeFreeCounts(myOffers));\r\n        } else {\r\n            myOffers = this.excludeFreeCounts(this.allOffers);\r\n            const filtered = myOffers.filter(_ => _.p >= this.myFirstP && _.p < 1);\r\n            if (filtered.length > 0) {\r\n                myOffers = filtered;\r\n            }\r\n        }\r\n        const index = randomInt(0, myOffers.length - 1);\r\n        return myOffers[index].counts;\r\n    }\r\n\r\n    private findOffer(): number[] {\r\n        let myOffers = this.getAvailableOffers();\r\n        const rivalHistory = this.history.filter(_ => !_.me);\r\n        if (rivalHistory.length > 0) {\r\n            const countStatistics = this.getRivalCountStatistics();\r\n            const countStatisticsP = countStatistics.map((count, i) => count / this.counts[i]);\r\n\r\n            const allRivalValues = this.allRivalValues.map(values => {\r\n                const value = this.getValue(countStatistics, values);\r\n                return new RivalValues(values, value, this.getP(value));\r\n            });\r\n            allRivalValues.orderBy(\r\n                { order: Order.Desc, selector: _ => _.value },\r\n                { order: Order.Desc, selector: _ => this.valuesCount(_.values) }\r\n            );\r\n\r\n            const rivalValues = allRivalValues[0].values;\r\n\r\n            const myOffersMap = myOffers.map(offer => {\r\n                const inverseOffer = this.inverse(offer.counts);\r\n                const rivalValue = this.getValue(inverseOffer, rivalValues);\r\n                const rivalP = this.getP(rivalValue);\r\n                const diff = this.diff(inverseOffer, countStatistics);\r\n                return {\r\n                    offer: offer,\r\n                    rivalValue: rivalValue,\r\n                    rivalP: rivalP,\r\n                    diff: diff\r\n                }\r\n            });\r\n\r\n            myOffersMap.orderBy(\r\n                { order: Order.Desc, selector: _ => _.rivalValue },\r\n                { order: Order.Desc, selector: _ => _.offer.value },\r\n                { order: Order.Asc, selector: _ => _.offer.count },\r\n            );\r\n\r\n            let myOffer = myOffersMap[0];\r\n\r\n            //if (this.round >= this.max_rounds - 1) {\r\n            const rivalP = this.rivalProbabilities[this.round];\r\n            const filteredMyOffersMap = myOffersMap.filter(_ => _.rivalP >= rivalP);\r\n            if (filteredMyOffersMap.length > 0) {\r\n                filteredMyOffersMap.orderBy(\r\n                    { order: Order.Desc, selector: _ => _.offer.value },\r\n                    { order: Order.Asc, selector: _ => _.offer.count }\r\n                );\r\n                myOffer = filteredMyOffersMap[0];\r\n            }\r\n            //}\r\n\r\n            return myOffer.offer.counts;\r\n        }\r\n        const index = randomInt(0, myOffers.length - 1);\r\n        return myOffers[index].counts;\r\n    }\r\n\r\n    private checkOffer(o: number[]): boolean {\r\n        const value = this.getValue(o);\r\n        const p = this.me && this.round >= this.max_rounds - 1 ? 0.4 : this.myProbabilities[this.round];\r\n        return this.getP(value) >= p;\r\n    }\r\n\r\n    offer(o: number[]): number[] | undefined {\r\n        let myOffer: number[];\r\n        if (o === undefined) {\r\n            myOffer = this.findFirstOffer();\r\n        } else {\r\n            this.history.push(new HistoryItem(false, this.inverse(o)));\r\n            if (this.checkOffer(o)) {\r\n                return undefined;\r\n            }\r\n            myOffer = this.findOffer();\r\n        }\r\n        this.history.push(new HistoryItem(true, myOffer));\r\n        this.round++;\r\n        return myOffer;\r\n    }\r\n}"],"sourceRoot":"."}