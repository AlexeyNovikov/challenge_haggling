'use strict'; /*jslint node:true*/

let ma = function(x,y) {
  return x.map(function(e,i){return e*y[i]}).reduce(function(summ,curr){return summ+curr},0);
}

let array_sum = function(arr){
  return arr.reduce(function(summ,curr){return summ+curr},0)
}


module.exports = class Agent {
  
  constructor(me, counts, values, max_rounds, log){
    this.is_first = (me == 0);
    this.counts = counts;
    this.values = values;
    this.rounds = max_rounds;
    this.log = log;
    this.total = 0;
    for (let i = 0; i<counts.length; i++)
      this.total += counts[i]*values[i];
    this.cid = this.counts.join('-');
    this.round = 0;
    
    let gen = {"1-1-1":[[0,0,10],[0,1,9],[0,2,8],[0,3,7],[0,4,6],[0,5,5],[0,6,4],[0,7,3],[0,8,2],[0,9,1],[0,10,0],[1,0,9],[1,1,8],[1,2,7],[1,3,6],[1,4,5],[1,5,4],[1,6,3],[1,7,2],[1,8,1],[1,9,0],[2,0,8],[2,1,7],[2,2,6],[2,3,5],[2,4,4],[2,5,3],[2,6,2],[2,7,1],[2,8,0],[3,0,7],[3,1,6],[3,2,5],[3,3,4],[3,4,3],[3,5,2],[3,6,1],[3,7,0],[4,0,6],[4,1,5],[4,2,4],[4,3,3],[4,4,2],[4,5,1],[4,6,0],[5,0,5],[5,1,4],[5,2,3],[5,3,2],[5,4,1],[5,5,0],[6,0,4],[6,1,3],[6,2,2],[6,3,1],[6,4,0],[7,0,3],[7,1,2],[7,2,1],[7,3,0],[8,0,2],[8,1,1],[8,2,0],[9,0,1],[9,1,0],[10,0,0]],"1-1-2":[[0,0,5],[0,2,4],[0,4,3],[0,6,2],[0,8,1],[0,10,0],[1,1,4],[1,3,3],[1,5,2],[1,7,1],[1,9,0],[2,0,4],[2,2,3],[2,4,2],[2,6,1],[2,8,0],[3,1,3],[3,3,2],[3,5,1],[3,7,0],[4,0,3],[4,2,2],[4,4,1],[4,6,0],[5,1,2],[5,3,1],[5,5,0],[6,0,2],[6,2,1],[6,4,0],[7,1,1],[7,3,0],[8,0,1],[8,2,0],[9,1,0],[10,0,0]],"1-1-3":[[0,1,3],[0,4,2],[0,7,1],[0,10,0],[1,0,3],[1,3,2],[1,6,1],[1,9,0],[2,2,2],[2,5,1],[2,8,0],[3,1,2],[3,4,1],[3,7,0],[4,0,2],[4,3,1],[4,6,0],[5,2,1],[5,5,0],[6,1,1],[6,4,0],[7,0,1],[7,3,0],[8,2,0],[9,1,0],[10,0,0]],"1-1-4":[[0,2,2],[0,6,1],[0,10,0],[1,1,2],[1,5,1],[1,9,0],[2,0,2],[2,4,1],[2,8,0],[3,3,1],[3,7,0],[4,2,1],[4,6,0],[5,1,1],[5,5,0],[6,0,1],[6,4,0],[7,3,0],[8,2,0],[9,1,0],[10,0,0]],"1-2-1":[[0,0,10],[0,1,8],[0,2,6],[0,3,4],[0,4,2],[0,5,0],[1,0,9],[1,1,7],[1,2,5],[1,3,3],[1,4,1],[2,0,8],[2,1,6],[2,2,4],[2,3,2],[2,4,0],[3,0,7],[3,1,5],[3,2,3],[3,3,1],[4,0,6],[4,1,4],[4,2,2],[4,3,0],[5,0,5],[5,1,3],[5,2,1],[6,0,4],[6,1,2],[6,2,0],[7,0,3],[7,1,1],[8,0,2],[8,1,0],[9,0,1],[10,0,0]],"1-2-2":[[0,0,5],[0,1,4],[0,2,3],[0,3,2],[0,4,1],[0,5,0],[2,0,4],[2,1,3],[2,2,2],[2,3,1],[2,4,0],[4,0,3],[4,1,2],[4,2,1],[4,3,0],[6,0,2],[6,1,1],[6,2,0],[8,0,1],[8,1,0],[10,0,0]],"1-2-3":[[0,2,2],[0,5,0],[1,0,3],[1,3,1],[2,1,2],[2,4,0],[3,2,1],[4,0,2],[4,3,0],[5,1,1],[6,2,0],[7,0,1],[8,1,0],[10,0,0]],"1-3-1":[[0,0,10],[0,1,7],[0,2,4],[0,3,1],[1,0,9],[1,1,6],[1,2,3],[1,3,0],[2,0,8],[2,1,5],[2,2,2],[3,0,7],[3,1,4],[3,2,1],[4,0,6],[4,1,3],[4,2,0],[5,0,5],[5,1,2],[6,0,4],[6,1,1],[7,0,3],[7,1,0],[8,0,2],[9,0,1],[10,0,0]],"1-3-2":[[0,0,5],[0,2,2],[1,1,3],[1,3,0],[2,0,4],[2,2,1],[3,1,2],[4,0,3],[4,2,0],[5,1,1],[6,0,2],[7,1,0],[8,0,1],[10,0,0]],"1-4-1":[[0,0,10],[0,1,6],[0,2,2],[1,0,9],[1,1,5],[1,2,1],[2,0,8],[2,1,4],[2,2,0],[3,0,7],[3,1,3],[4,0,6],[4,1,2],[5,0,5],[5,1,1],[6,0,4],[6,1,0],[7,0,3],[8,0,2],[9,0,1],[10,0,0]],"2-1-1":[[0,0,10],[0,1,9],[0,2,8],[0,3,7],[0,4,6],[0,5,5],[0,6,4],[0,7,3],[0,8,2],[0,9,1],[0,10,0],[1,0,8],[1,1,7],[1,2,6],[1,3,5],[1,4,4],[1,5,3],[1,6,2],[1,7,1],[1,8,0],[2,0,6],[2,1,5],[2,2,4],[2,3,3],[2,4,2],[2,5,1],[2,6,0],[3,0,4],[3,1,3],[3,2,2],[3,3,1],[3,4,0],[4,0,2],[4,1,1],[4,2,0],[5,0,0]],"2-1-2":[[0,0,5],[0,2,4],[0,4,3],[0,6,2],[0,8,1],[0,10,0],[1,0,4],[1,2,3],[1,4,2],[1,6,1],[1,8,0],[2,0,3],[2,2,2],[2,4,1],[2,6,0],[3,0,2],[3,2,1],[3,4,0],[4,0,1],[4,2,0],[5,0,0]],"2-1-3":[[0,1,3],[0,4,2],[0,7,1],[0,10,0],[1,2,2],[1,5,1],[1,8,0],[2,0,2],[2,3,1],[2,6,0],[3,1,1],[3,4,0],[4,2,0],[5,0,0]],"2-2-1":[[0,0,10],[0,1,8],[0,2,6],[0,3,4],[0,4,2],[0,5,0],[1,0,8],[1,1,6],[1,2,4],[1,3,2],[1,4,0],[2,0,6],[2,1,4],[2,2,2],[2,3,0],[3,0,4],[3,1,2],[3,2,0],[4,0,2],[4,1,0],[5,0,0]],"2-2-2":[[0,0,5],[0,1,4],[0,2,3],[0,3,2],[0,4,1],[0,5,0],[1,0,4],[1,1,3],[1,2,2],[1,3,1],[1,4,0],[2,0,3],[2,1,2],[2,2,1],[2,3,0],[3,0,2],[3,1,1],[3,2,0],[4,0,1],[4,1,0],[5,0,0]],"2-3-1":[[0,0,10],[0,1,7],[0,2,4],[0,3,1],[1,0,8],[1,1,5],[1,2,2],[2,0,6],[2,1,3],[2,2,0],[3,0,4],[3,1,1],[4,0,2],[5,0,0]],"3-1-1":[[0,0,10],[0,1,9],[0,2,8],[0,3,7],[0,4,6],[0,5,5],[0,6,4],[0,7,3],[0,8,2],[0,9,1],[0,10,0],[1,0,7],[1,1,6],[1,2,5],[1,3,4],[1,4,3],[1,5,2],[1,6,1],[1,7,0],[2,0,4],[2,1,3],[2,2,2],[2,3,1],[2,4,0],[3,0,1],[3,1,0]],"3-1-2":[[0,0,5],[0,2,4],[0,4,3],[0,6,2],[0,8,1],[0,10,0],[1,1,3],[1,3,2],[1,5,1],[1,7,0],[2,0,2],[2,2,1],[2,4,0],[3,1,0]],"3-2-1":[[0,0,10],[0,1,8],[0,2,6],[0,3,4],[0,4,2],[0,5,0],[1,0,7],[1,1,5],[1,2,3],[1,3,1],[2,0,4],[2,1,2],[2,2,0],[3,0,1]],"4-1-1":[[0,0,10],[0,1,9],[0,2,8],[0,3,7],[0,4,6],[0,5,5],[0,6,4],[0,7,3],[0,8,2],[0,9,1],[0,10,0],[1,0,6],[1,1,5],[1,2,4],[1,3,3],[1,4,2],[1,5,1],[1,6,0],[2,0,2],[2,1,1],[2,2,0]]};
    let vlp = 1/(gen[this.cid].length-1);
    this.valuations = gen[this.cid]
      .filter(t => t.join('-') !== this.values.join('-'))
      .map(t => {return {v:t,p:vlp}});

    this.offers_list = [];
    this.offers = {};
    for (let i=0; i<=counts[0]; i++) {
      for (let j=0; j<=counts[1]; j++) {
        for (let k=0; k<=counts[2]; k++) {
          let oid = [i,j,k].join('-');
          this.offers_list.push(oid);
          this.offers[oid] = {m:[i,j,k], e:[counts[0]-i,counts[1]-j,counts[2]-k]};
        }
      }
    }

    this.profit = {
      me:{},
      enemy:{}
    };
    this.offers_list.forEach(oid => {
      this.profit.me[oid] = ma(this.offers[oid].m, this.values);
    })
    this.offers_list.forEach(oid => {
      this.profit.enemy[oid] = this.valuations.map(val => {
        return ma(this.offers[oid].e, val.v) * val.p
      }).reduce(function(summ,curr){return summ+curr},0);
    })

    this.offers_history = {
      me: [],
      enemy: []
    }

    let bad_offers = this.offers_list.filter(oid => this.profit.me[oid] <= 5);
    bad_offers.push(this.cid);
    for (let i=0; i<this.values.length; i++) {
      if (this.values[i] == 0) {
        bad_offers = bad_offers.concat(this.offers_list.filter(oid => this.offers[oid].m[i] > 0));
      }
    }
    this.available_offers = this.offers_list.filter(oid => !bad_offers.includes(oid));
  }

  _check_offer(oid){
    if (this.offers_history.me.includes(oid)) {
      return true
    }
    let threshold = [0,9,8,7,7,7];
    if (this.profit.me[oid] >= threshold[this.round]) {
      return true
    }
    if (!this.is_first && this.round == this.max_rounds && this.profit.me[oid] >= 6) {
      return true
    }
  }

  _make_offer(){
    if (this.is_first && this.round == this.max_rounds) {
      let best_offer = this.offers_history.enemy[0];
      this.offers_history.enemy.forEach(oid => {
        if (this.profit.me[oid] > this.profit.me[best_offer]) {
          best_offer = oid;
        }
        if (this.profit.me[best_offer] >= 6) {
          return this.offers[best_offer].m
        }
      })
    }

    let ao_map = {}
    let ao_list = []
    this.available_offers.forEach(oid => {
      let key = '' + (this.profit.me[oid]-1) + '.' + array_sum(this.offers[oid].e);
      let val = {oid:oid, count:array_sum(this.offers[oid].e)};
      if (ao_map[key]) {
        ao_map[key].push(val)
      } else {
        ao_map[key] = [val]
      }
      if (!ao_list.includes(key)) {
        ao_list.push(key)
      }
    })
    ao_list.sort()
    ao_list.reverse()
    let oid = ao_map[ao_list[0]][0].oid

    let threshold = ([0,9,8,7,7,6])[this.round]
    let max_count = 0;
    let max_ids = [];

    this.available_offers.filter(oid => {
      return (this.profit.me[oid] >= threshold) && !this.offers_history.me.includes(oid)
    }).forEach(oid => {
      let c = array_sum(this.offers[oid].e);
      if (c > max_count) {
        max_count = c;
        max_ids = [oid];
      } else if (c == max_count) {
        max_ids.push(oid);
      }
    })
    if (max_ids.length > 0) {
      oid = max_ids[0];
    }
    return oid
  }


  offer(o){
    this.round += 1;
    if (o) {
      let oid = o.join('-');
      this.offers_history.enemy.push(oid);
      let accept = this._check_offer(oid);
      if (accept) {
        return
      }
    }
    let oid = this._make_offer();
    this.offers_history.me.push(oid);
    return this.offers[oid].m
  }

};
